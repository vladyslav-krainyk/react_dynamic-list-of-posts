{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","types/ErrorType.ts","App.tsx","api/users.ts","api/posts.ts","api/comments.ts","index.tsx"],"names":["PostItem","post","selectedPost","onSelectPost","isSelected","id","title","className","type","classNames","onClick","PostsList","posts","map","Loader","NewCommentForm","isPostComment","onAddComment","useState","postId","name","email","body","newComment","setNewComment","errors","setErrors","EMAIL_REGEX","validForm","isValid","newErrors","trim","String","match","handleChange","event","target","value","onSubmit","preventDefault","htmlFor","placeholder","onChange","PostDetails","comments","isLoadingComments","isError","onDeleteComment","isOpenForm","setIsOpenForm","length","comment","href","UserSelector","users","selectedUser","onSelectedUser","isActive","setIsActive","prevState","role","user","handleSelectedUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","ErrorType","client","App","setUsers","setPosts","setComments","setSelectedUser","setSelectedPost","isLoading","setIsLoading","setIsLoadingComments","setIsPostComment","NONE","setIsError","noPostsYet","useMemo","useEffect","catch","USERS","finally","userId","POSTS","useCallback","handleSelectedPost","COMMENTS","addComment","prevComments","ADDCOMMENT","commentId","deleteComment","filter","DELETECOMMENT","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bf63dea.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPost: Post | null,\n  onSelectPost: (post: Post | null) => void,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  onSelectPost,\n}) => {\n  const isSelected = selectedPost?.id === post.id;\n\n  return (\n    <tr\n      data-cy=\"Post\"\n    >\n      <td data-cy=\"PostId\">\n        {post.id}\n      </td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', { 'is-light': !isSelected })}\n          onClick={() => onSelectPost(post)}\n        >\n          {isSelected ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  onSelectPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onSelectPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              selectedPost={selectedPost}\n              onSelectPost={onSelectPost}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null,\n  isPostComment: boolean,\n  onAddComment: (data: CommentData) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  isPostComment,\n  onAddComment,\n}) => {\n  const [newComment, setNewComment] = useState({\n    postId: selectedPost?.id,\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [errors, setErrors] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  /* eslint-disable-next-line */\n  const EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const validateEmail = (email: string) => {\n    return String(email)\n      .match(EMAIL_REGEX);\n  };\n\n  const validForm = () => {\n    let isValid = true;\n    const newErrors = {\n      name: '',\n      email: '',\n      body: '',\n    };\n\n    if (!newComment.name.trim()) {\n      newErrors.name = 'Name is required';\n      isValid = false;\n    }\n\n    if (!newComment.email.trim()) {\n      newErrors.email = 'Email is required';\n      isValid = false;\n    }\n\n    if (!validateEmail(newComment.email)) {\n      newErrors.email = 'Invalid email format';\n      isValid = false;\n    }\n\n    if (!newComment.body.trim()) {\n      newErrors.body = 'Enter some text';\n      isValid = false;\n    }\n\n    setErrors(newErrors);\n\n    return isValid;\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n    setErrors({\n      ...errors,\n      [name]: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (validForm()) {\n      onAddComment(newComment);\n      setNewComment({\n        postId: selectedPost?.id,\n        name: newComment.name,\n        email: newComment.email,\n        body: '',\n      });\n      setErrors({\n        name: '',\n        email: '',\n        body: '',\n      });\n    }\n  };\n\n  const handleClear = () => {\n    setNewComment({\n      postId: selectedPost?.id,\n      name: '',\n      email: '',\n      body: '',\n    });\n    setErrors({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={newComment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.name}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={newComment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.email}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={newComment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.body}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isPostComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  selectedPost: Post | null,\n  comments: Comment[],\n  isLoadingComments: boolean,\n  isError: ErrorType,\n  onAddComment: (data: CommentData) => void,\n  isPostComment: boolean,\n  onDeleteComment: (commentId: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isLoadingComments,\n  isError,\n  onAddComment,\n  isPostComment,\n  onDeleteComment,\n}) => {\n  const [isOpenForm, setIsOpenForm] = useState<boolean>(false);\n\n  const handleOpenForm = () => {\n    setIsOpenForm(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {isError}\n            </div>\n          )}\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n        </div>\n        {isOpenForm ? (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            isPostComment={isPostComment}\n            onAddComment={onAddComment}\n          />\n        ) : (\n          <>\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenForm}\n            >\n              Write a comment\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  onSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectedUser,\n}) => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n\n  const handleDropdown = () => {\n    setIsActive(prevState => !prevState);\n  };\n\n  const handleSelectedUser = (user: User) => {\n    onSelectedUser(user);\n    setIsActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={() => handleSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  NONE = '',\n  USERS = 'Unable to load users',\n  POSTS = 'Unable to load posts',\n  COMMENTS = 'Unable to load comments',\n  ADDCOMMENT = 'Unable to add a comment',\n  DELETECOMMENT = 'Unable to delete a comment',\n}\n","import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments, addComment, deleteComment } from './api/comments';\nimport { Comment, CommentData } from './types/Comment';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isLoadingComments, setIsLoadingComments] = useState<boolean>(false);\n  const [isPostComment, setIsPostComment] = useState<boolean>(false);\n  const [isError, setIsError] = useState<ErrorType>(ErrorType.NONE);\n\n  const noPostsYet = useMemo(() => {\n    return !posts.length && selectedUser\n      && !isLoading && !isError;\n  }, [posts, isLoading, isError]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(ErrorType.USERS))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (!selectedUser) {\n      setPosts([]);\n      setIsLoading(false);\n\n      return;\n    }\n\n    getPosts(selectedUser.id)\n      .then(setPosts)\n      .catch(() => setIsError(ErrorType.POSTS))\n      .finally(() => setIsLoading(false));\n  }, [selectedUser]);\n\n  const handleSelectedUser = useCallback((user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n  }, []);\n\n  const handleSelectedPost = useCallback((post: Post | null) => {\n    if (selectedPost?.id === post?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post || null);\n  }, [posts, selectedPost]);\n\n  useEffect(() => {\n    setIsLoadingComments(true);\n\n    if (!selectedPost) {\n      setComments([]);\n      setIsLoading(false);\n\n      return;\n    }\n\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setIsError(ErrorType.COMMENTS))\n      .finally(() => setIsLoadingComments(false));\n  }, [selectedPost]);\n\n  const handleAddComment = (data: CommentData) => {\n    setIsPostComment(true);\n\n    addComment(data)\n      .then((newComment) => {\n        setComments((prevComments) => [...prevComments, newComment]);\n      })\n      .catch(() => setIsError(ErrorType.ADDCOMMENT))\n      .finally(() => setIsPostComment(false));\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments((prevComments) => prevComments\n          .filter((comment) => comment.id !== commentId));\n      })\n      .catch(() => setIsError(ErrorType.DELETECOMMENT));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelectedUser={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {isError}\n                  </div>\n                )}\n\n                {noPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts.length && !isLoading && !isError && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    onSelectPost={handleSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isLoadingComments={isLoadingComments}\n                  isError={isError}\n                  onAddComment={handleAddComment}\n                  isPostComment={isPostComment}\n                  onDeleteComment={handleDeleteComment}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}